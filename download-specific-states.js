const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const https = require('https');

// –°–ø–∏—Å–æ–∫ —à—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const specificStates = [
    { name: 'delaware', code: 'delaware' },
    { name: 'colorado', code: 'colorado' },
    { name: 'california', code: 'california' },
    { name: 'arkansas', code: 'arkansas' },
    { name: 'alaska', code: 'alaska' },
    { name: 'georgia', code: 'georgia' },
    { name: 'indiana', code: 'indiana' },
    { name: 'louisiana', code: 'louisiana' },
    { name: 'massachusetts', code: 'massachusetts' },
    { name: 'minnesota', code: 'minnesota' },
    { name: 'montana', code: 'montana' },
    { name: 'wyoming', code: 'wyoming' },
    { name: 'washington', code: 'washington' },
    { name: 'vermont', code: 'vermont' },
    { name: 'texas', code: 'texas' }
];

const DATA_DIR = './data';
const TEMP_DIR = './temp';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry
const RETRY_CONFIG = {
    maxRetries: 5, // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —à—Ç–∞—Ç–æ–≤
    initialDelay: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    backoffMultiplier: 1.5,
    timeout: 600000 // 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —à—Ç–∞—Ç–æ–≤
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
[DATA_DIR, TEMP_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
    }
});

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function downloadFileWithRetry(url, dest, retryCount = 0) {
    return new Promise((resolve, reject) => {
        const file = fs.createWriteStream(dest);
        let isResolved = false;
        let downloadedBytes = 0;
        let totalBytes = 0;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        const timeout = setTimeout(() => {
            if (!isResolved) {
                isResolved = true;
                file.destroy();
                fs.unlink(dest, () => {});
                reject(new Error('Timeout: –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏'));
            }
        }, RETRY_CONFIG.timeout);

        const request = https.get(url, {
            timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        }, (response) => {
            if (response.statusCode === 200) {
                totalBytes = parseInt(response.headers['content-length']) || 0;
                
                response.on('data', (chunk) => {
                    downloadedBytes += chunk.length;
                    if (totalBytes > 0) {
                        const percent = Math.round((downloadedBytes / totalBytes) * 100);
                        process.stdout.write(`\r   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${percent}% (${Math.round(downloadedBytes / 1024 / 1024)}MB)`);
                    }
                });
                
                response.pipe(file);
                
                file.on('finish', () => {
                    if (!isResolved) {
                        isResolved = true;
                        file.close();
                        clearTimeout(timeout);
                        console.log(); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        resolve();
                    }
                });
                
                file.on('error', (err) => {
                    if (!isResolved) {
                        isResolved = true;
                        clearTimeout(timeout);
                        fs.unlink(dest, () => {});
                        console.log(); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        reject(err);
                    }
                });
            } else {
                isResolved = true;
                clearTimeout(timeout);
                file.destroy();
                fs.unlink(dest, () => {});
                reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
            }
        });

        request.on('error', (err) => {
            if (!isResolved) {
                isResolved = true;
                clearTimeout(timeout);
                file.destroy();
                fs.unlink(dest, () => {});
                console.log(); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                reject(err);
            }
        });

        request.on('timeout', () => {
            if (!isResolved) {
                isResolved = true;
                clearTimeout(timeout);
                file.destroy();
                fs.unlink(dest, () => {});
                console.log(); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                reject(new Error('Request timeout'));
            }
        });
    });
}

async function downloadFile(url, dest, stateName) {
    let lastError;
    
    for (let attempt = 0; attempt <= RETRY_CONFIG.maxRetries; attempt++) {
        try {
            console.log(`   –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt + 1}/${RETRY_CONFIG.maxRetries + 1} –¥–ª—è ${stateName}...`);
            await downloadFileWithRetry(url, dest);
            return; // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        } catch (error) {
            lastError = error;
            console.warn(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error.message);
            
            if (attempt < RETRY_CONFIG.maxRetries) {
                const delay = RETRY_CONFIG.initialDelay * Math.pow(RETRY_CONFIG.backoffMultiplier, attempt);
                console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(delay / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                await sleep(delay);
            }
        }
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ ${RETRY_CONFIG.maxRetries + 1} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError.message}`);
}

async function processState(state, index, total) {
    console.log(`\n[${index + 1}/${total}] üèõÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ —à—Ç–∞—Ç–∞ ${state.name.toUpperCase()}...`);
    
    const pbfFile = path.join(TEMP_DIR, `${state.code}.osm.pbf`);
    const url = `https://download.geofabrik.de/north-america/us/${state.code}-latest.osm.pbf`;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —à—Ç–∞—Ç
        const existingFiles = fs.readdirSync(DATA_DIR);
        const stateFiles = existingFiles.filter(file => file.startsWith(state.code));
        
        if (stateFiles.length > 0) {
            console.log(`   ‚úÖ ${state.name} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
            return true;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (fs.existsSync(pbfFile)) {
            fs.unlinkSync(pbfFile);
            console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —á–∞—Å—Ç–∏—á–Ω—ã–π —Ñ–∞–π–ª`);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
        console.log(`   üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${state.name}...`);
        await downloadFile(url, pbfFile, state.name);
        console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ ${state.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é OSRM
        console.log(`   ‚öôÔ∏è  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${state.name}...`);
        execSync(`docker run -t -v "${path.resolve(TEMP_DIR)}:/data" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/${state.code}.osm.pbf`, { stdio: 'inherit' });
        
        console.log(`   üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è ${state.name}...`);
        execSync(`docker run -t -v "${path.resolve(TEMP_DIR)}:/data" ghcr.io/project-osrm/osrm-backend osrm-partition /data/${state.code}.osrm`, { stdio: 'inherit' });
        
        console.log(`   üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${state.name}...`);
        execSync(`docker run -t -v "${path.resolve(TEMP_DIR)}:/data" ghcr.io/project-osrm/osrm-backend osrm-customize /data/${state.code}.osrm`, { stdio: 'inherit' });
        
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        const files = fs.readdirSync(TEMP_DIR);
        let movedFiles = 0;
        
        files.forEach(file => {
            if (file.startsWith(state.code)) {
                const srcPath = path.join(TEMP_DIR, file);
                const destPath = path.join(DATA_DIR, file);
                
                try {
                    fs.renameSync(srcPath, destPath);
                    movedFiles++;
                } catch (renameError) {
                    // –ï—Å–ª–∏ rename –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º
                    fs.copyFileSync(srcPath, destPath);
                    fs.unlinkSync(srcPath);
                    movedFiles++;
                }
            }
        });
        
        console.log(`   ‚úÖ ${state.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! (${movedFiles} —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ)`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à—Ç–∞—Ç–∞–º–∏
        await sleep(2000);
        
        return true;
        
    } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${state.name}:`, error.message);
        
        // –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try {
            if (fs.existsSync(pbfFile)) {
                fs.unlinkSync(pbfFile);
                console.log(`   üóëÔ∏è  –û—á–∏—â–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${pbfFile}`);
            }
        } catch (cleanupError) {
            console.warn(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª ${pbfFile}`);
        }
        
        return false;
    }
}

async function processSpecificStates() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à—Ç–∞—Ç–æ–≤ –°–®–ê...');
    console.log(`‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry: –º–∞–∫—Å–∏–º—É–º ${RETRY_CONFIG.maxRetries} –ø–æ–ø—ã—Ç–æ–∫, —Ç–∞–π–º–∞—É—Ç ${RETRY_CONFIG.timeout/1000} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìã –®—Ç–∞—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${specificStates.length}`);
    console.log('‚îÅ'.repeat(80));
    
    let processed = 0;
    let failed = 0;
    let skipped = 0;
    const failedStates = [];
    
    for (let i = 0; i < specificStates.length; i++) {
        const state = specificStates[i];
        
        try {
            const result = await processState(state, i, specificStates.length);
            if (result === true) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —à—Ç–∞—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                const existingFiles = fs.readdirSync(DATA_DIR);
                const stateFiles = existingFiles.filter(file => file.startsWith(state.code));
                
                if (stateFiles.length > 0 && result === true) {
                    const wasProcessedBefore = stateFiles.some(file => file.includes('.osrm'));
                    if (wasProcessedBefore) {
                        skipped++;
                    } else {
                        processed++;
                    }
                } else {
                    processed++;
                }
            }
        } catch (error) {
            failed++;
            failedStates.push(state.name);
            console.error(`‚ùå –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${state.name}:`, error.message);
        }
    }
    
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log(`üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed} —à—Ç–∞—Ç–æ–≤`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ${skipped} —à—Ç–∞—Ç–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed} —à—Ç–∞—Ç–æ–≤`);
    console.log(`üìÅ –í—Å–µ–≥–æ —à—Ç–∞—Ç–æ–≤: ${specificStates.length}`);
    
    if (failedStates.length > 0) {
        console.log(`\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —à—Ç–∞—Ç—ã: ${failedStates.join(', ')}`);
        console.log('‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    } else {
        console.log('\nüéâ –í—Å–µ —à—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É—Å–ø–µ—Ö–µ
        try {
            const tempFiles = fs.readdirSync(TEMP_DIR);
            tempFiles.forEach(file => {
                if (tempFiles.includes(file)) {
                    fs.unlinkSync(path.join(TEMP_DIR, file));
                }
            });
            console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
        } catch (cleanupError) {
            console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üèõÔ∏è  –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à—Ç–∞—Ç–æ–≤ –°–®–ê –¥–ª—è OSRM

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node download-specific-states.js

–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–µ —à—Ç–∞—Ç—ã:
${specificStates.map(s => `  ‚Ä¢ ${s.name}`).join('\n')}

–û–ø—Ü–∏–∏:
  --help, -h    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
`);
    process.exit(0);
}

processSpecificStates().catch(console.error); 